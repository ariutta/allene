#!/usr/bin/env bash

# see https://stackoverflow.com/a/246128/5354298
get_script_dir() { echo "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"; }
SCRIPT_DIR=$(get_script_dir)
START_DIR=$(pwd)
on_error() {
  true
}
cleanup_complete=0
cleanup() {
  cd "$START_DIR" || return
  cleanup_complete=1
}
# Based on http://linuxcommand.org/lc3_wss0140.php
# and https://codeinthehole.com/tips/bash-error-reporting/
error_exit() {
  #	----------------------------------------------------------------
  #	Function for exit due to fatal program error
  #		Accepts 1 argument:
  #			string containing descriptive error message
  #	----------------------------------------------------------------

  on_error

  read -r line file <<<"$(caller)"
  if [ ! -e "$file" ]; then
    file="$SCRIPT_DIR/$file"
  fi
  echo "" 1>&2
  echo "ERROR: file $file, line $line" 1>&2
  if [ ! "$1" ] && [ -e "$file" ]; then
    sed "${line}q;d" "$file" 1>&2
  else
    echo "${1:-"Unknown Error"}" 1>&2
  fi
  echo "" 1>&2

  # TODO: should error_exit call cleanup?
  #       The EXIT trap already calls cleanup, so
  #       calling it here means calling it twice.
  if [ ! $cleanup_complete ]; then
    cleanup
  fi
  exit 1
}
trap error_exit ERR
trap cleanup EXIT INT QUIT TERM
shopt -s globstar
shopt -s extglob

if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
  echo "allene update"
  echo "Update all my enabled dependencies (excluding any in ./packages/node_modules/available/**)."
  exit 0
fi

# shellcheck source=utils.sh
. "$SCRIPT_DIR"/utils.sh || error_exit "Failed to source utils.sh"
[ -z "$ALLENE_PACMAN_CLI" ] && error_exit "ALLENE_PACMAN_CLI not set"

ALLENE_PACMAN_CLI="$ALLENE_PACMAN_CLI" "$SCRIPT_DIR"/collect-dependencies

touch yarn.lock package-lock.json
rm yarn.lock package-lock.json
eval "$ALLENE_PACMAN_CLI install"
if [ "$ALLENE_PACMAN_CLI" == "yarn" ]; then
  #yarn upgrade
  # TODO: yarn upgrade doesn't update package.json
  # See issue https://github.com/yarnpkg/yarn/issues/3266

  # This will just upgrade package.json to the latest version, ignoring semver:
  #jq '.dependencies | keys | .[]' package.json | xargs yarn add

  # This allows the user to choose and at least sometimes updates package.json
  yarn upgrade-interactive
else
  npm update
fi

if [ "$ALLENE_PACMAN_CLI" == "yarn" ]; then
  yarn audit
  echo "Notice: there is no yarn equivalent to 'npm audit fix'.
  See https://github.com/yarnpkg/yarn/issues/7075" 1>&2
else
  npm audit fix
fi

update_pkg() {
  pkg="$1"
  ALLENE_PACMAN_CLI="$2"
  START_DIR="$3"
  SCRIPT_DIR="$4"

  cd "$START_DIR" || error_exit "Error: 'cd \"$START_DIR\"' failed."

  # shellcheck source=utils.sh
  . "$SCRIPT_DIR"/utils.sh || error_exit "Failed to source utils.sh"

  # all packages and direct dependencies for this project
  pkgs_and_versions=$(jq '.dependencies' package.json)

  jq_query=$(
  (sed 's/^\s*//g' | tr -d '\012') <<END
(.[\$dep_key] // {}) |
to_entries |
map({
  "key": .key,
  "value": (
    if (\$pkgs_and_versions[.key] != null) 
    then \$pkgs_and_versions[.key] 
    else .value 
    end
  )
}) |
from_entries
END
)

  echo "**********************************" 1>&2
  echo "* $pkg" 1>&2
  echo "**********************************" 1>&2

  echo "$pkg: updating package.json" 1>&2

  has_dependencies=$(jq 'has("dependencies")' ./packages/node_modules/"$pkg"/package.json)
  has_dev_dependencies=$(jq 'has("devDependencies")' ./packages/node_modules/"$pkg"/package.json)

  child_package_json_path="./packages/node_modules/$pkg/package.json"
  child_package_json_tmp_path="./packages/node_modules/$pkg/package_tmp.json"
  updated_deps_path="./packages/node_modules/$pkg/updated_deps.json"

  latest_published_version=$(get_pkg_info "$pkg" | jq '.versions | last')
  package_json_version=$(jq '.version' "$child_package_json_path")
  if [ "$latest_published_version" != "$package_json_version" ]; then
    error_exit "Latest published version: $latest_published_version vs. package.json version: $package_json_version"
    # TODO: does this handle the case like cget/cxsd?
    #       cget has cxsd as a dev dep, but
    #       cxsd has cget as a dependency.
    #       We basically always just want to use the second-to-latest version of
    #       cxsd as the dev dependency for cget in this case.
  fi

  if [ "$has_dependencies" != 'true' ] && [ "$has_dev_dependencies" != 'true' ]; then
    echo "$pkg has no deps." 1>&2
    return
  fi

  if [ "$has_dependencies" == 'true' ]; then
    jq --arg dep_key 'dependencies' --argjson pkgs_and_versions "$pkgs_and_versions" \
      "$jq_query" \
      "$child_package_json_path" >"$updated_deps_path"

    jq --slurpfile updated_deps "$updated_deps_path" \
      '(.dependencies // {}) |= $updated_deps[0]' "$child_package_json_path" >"$child_package_json_tmp_path"

    mv "$child_package_json_tmp_path" "$child_package_json_path"
    rm "$updated_deps_path"
  fi

  if [ "$has_dev_dependencies" == 'true' ]; then
    jq --arg dep_key 'devDependencies' --argjson pkgs_and_versions "$pkgs_and_versions" \
      "$jq_query" \
      "$child_package_json_path" >"$updated_deps_path"

    jq --slurpfile updated_deps "$updated_deps_path" \
      '(.devDependencies // {}) |= $updated_deps[0]' "$child_package_json_path" >"$child_package_json_tmp_path"

    mv "$child_package_json_tmp_path" "$child_package_json_path"
    rm "$updated_deps_path"
  fi

  child_dir="./packages/node_modules/$pkg"

  cd "$child_dir" || error_exit "Error: 'cd \"$child_dir\"' failed."

  # TODO: instead of cd'ing into the child directory,
  # could/should we use npm explore? Example:
  #   npm explore kaavio -- npm run build

  #git status -s

  echo "$pkg: updating lockfile and building" 1>&2
  touch yarn.lock package-lock.json
  rm yarn.lock package-lock.json
  if [ "$ALLENE_PACMAN_CLI" == "yarn" ]; then
    # NOTE: yarn generate-lock-entry isn't correct
    # See issue https://github.com/yarnpkg/yarn/issues/2340
    yarn install --modules-folder "$START_DIR"/node_modules
  else
    npm install --package-lock-only
    npm run --silent build || error_exit \
      "Error: 'npm run --silent build' failed for $pkg. Remove '--silent' to debug."
  fi
#  # Re-enable the following when yarn generate-lock-entry is fixed:
#  "$ALLENE_PACMAN_CLI" run --silent build || error_exit \
#    "Error: '$ALLENE_PACMAN_CLI run --silent build' failed for $pkg. Remove '--silent' to debug."

  echo "$pkg: testing" 1>&2
  "$ALLENE_PACMAN_CLI" run --silent test || error_exit \
    "Error: '$ALLENE_PACMAN_CLI run --silent test' failed for $pkg. Remove '--silent' to debug."

  cd "$START_DIR" || error_exit "Error: 'cd \"$START_DIR\"' failed."
}

export -f update_pkg

# We are processing packages in batches of siblings in a dependency hierarchy.
# That means that if any package in a given batch has a dependency on one of my
# packages, that dependency will be found in a previous batch.
for batch in $(jq -r 'map(join("|")) | .[]' "$ALLENE_CACHE"/pkg_batches.json); do
  echo "" 1>&2
  echo "=================================================================" 1>&2
  echo "Batch: $batch" 1>&2
  echo "=================================================================" 1>&2
  parallel update_pkg \
    ::: $(echo "$batch" |  jq -Rr 'split("|") | map("\(.)\n") | .[]') \
    ::: "$ALLENE_PACMAN_CLI" \
    ::: "$START_DIR" \
    ::: "$SCRIPT_DIR" ||
	error_exit "Failed while updating one of these packages: $batch"
done

if ! "$ALLENE_PACMAN_CLI" audit; then
  if [ "$ALLENE_PACMAN_CLI" == "npm" ]; then
    echo 'You can try to force the fixes, but be ready to address breaking changes:' 1>&2
    echo "  $ALLENE_PACMAN_CLI audit fix --force" 1>&2
  fi
fi
"$ALLENE_PACMAN_CLI" outdated || echo "TODO: update dependencies manually." 1>&2
