#!/usr/bin/env bash

# see https://stackoverflow.com/a/246128/5354298
get_script_dir() { echo "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"; }
SCRIPT_DIR=$(get_script_dir)
cleanup_complete=0
cleanup() {
  echo 'Cleaning up...'
  cd "$SCRIPT_DIR" || return
  cleanup_complete=1
}
# Based on http://linuxcommand.org/lc3_wss0140.php
# and https://codeinthehole.com/tips/bash-error-reporting/
error_exit() {
  #	----------------------------------------------------------------
  #	Function for exit due to fatal program error
  #		Accepts 1 argument:
  #			string containing descriptive error message
  #	----------------------------------------------------------------

  read -r line file <<<"$(caller)"
  echo "" 1>&2
  echo "ERROR: file $file, line $line" 1>&2
  if [ ! "$1" ]; then
    sed "${line}q;d" "$SCRIPT_DIR/$file" 1>&2
  else
    echo "${1:-"Unknown Error"}" 1>&2
  fi
  echo "" 1>&2

  # TODO: should error_exit call cleanup?
  #       The EXIT trap already calls cleanup, so
  #       calling it here means calling it twice.
  if [ ! $cleanup_complete ]; then
    cleanup
  fi
  exit 1
}
trap error_exit ERR
trap cleanup EXIT INT QUIT TERM

ALLE_PKG_JSON_PATH="./package.json"
BIN_DIR="$SCRIPT_DIR/packages/node_modules/.bin"

if [ ! -e "$ALLE_PKG_JSON_PATH" ]; then
  error_exit "Missing alle top-level package.json"
fi

# TODO: be consistent with how to handle symlinks.
# I'm removing them all here, bc some of the 'ln -s ...' commands below
# don't check whether the symlink exists, but some do check.
rm "$BIN_DIR"/*

# create symlinks for third-party command line tools
for name in $(jq -r '.dependencies | keys | @sh' "$ALLE_PKG_JSON_PATH"); do
  eval "cd \"$SCRIPT_DIR\"/node_modules/$name || exit 1"
  if [ "$(jq 'has("bin")' package.json)" == 'true' ]; then
    jq -r --arg name "$name" --arg BIN_DIR "$BIN_DIR" \
      '.bin | to_entries | .[] | "ln -s ../../../node_modules/\($name)/\"\(.value)\" \"\($BIN_DIR)/\(.key)\""' \
      package.json |
      while read -r cmd; do
        #echo "$cmd"
        eval "$cmd"
      done
  elif [ -d bin ]; then
    cd bin || exit 1
    source_dir="$(pwd)"
    cd "$BIN_DIR" || exit 1
    for source_path in "$source_dir"/*; do
      executable_name=$(basename "$source_path")
      executable_path="$executable_name"
      if [ -d "$source_path" ] && [ -x "$source_path/index.js" ]; then
        executable_path="$executable_name/index.js"
      elif [ -x "$source_path" ]; then
        executable_path="$executable_name"
      else
        echo "No executable found for $executable_name. Skipping."
        continue
      fi
      if [ -L "$executable_name" ] && [ ! -e "$executable_name" ]; then
        echo "Removing dead symlink"
        rm "$executable_name"
      fi
      if [ -x "$source_path" ] && [ ! -e "$executable_name" ]; then
        # the source is executable and the destination doesn't already exist
        #echo "ln -s ../../../node_modules/$name/bin/\"$executable_path\" \"$executable_name\""
        eval "ln -s ../../../node_modules/$name/bin/\"$executable_path\" \"$executable_name\""
      fi
    done
  fi
  cd "$SCRIPT_DIR" || exit 1
done

rm "$BIN_DIR/npm"
#rm "$BIN_DIR/npm-cli.js"

# create symlinks for local command line tools
for pkg_f in packages/node_modules/\@*/*/package.json packages/node_modules/*/package.json; do
  local_dir=$(dirname "$pkg_f")
  cd "$local_dir" || exit 1
  if [ -d bin ]; then
    cd bin || exit 1
    source_dir="$(pwd)"
    cd "$BIN_DIR" || exit 1
    for source_path in "$source_dir"/*; do
      filename=$(basename "$source_path")
      if [ -L "$filename" ] && [ ! -e "$filename" ]; then
        echo "Removing dead symlink"
        rm "$filename"
      fi
      if [ -x "$source_path" ] && [ ! -e "$filename" ]; then
        # the source is executable and the destination doesn't already exist
        #echo "ln -s ../../../\"$local_dir/bin/$filename\" \"$filename\""
        eval "ln -s ../../../\"$local_dir/bin/$filename\" \"$filename\""
      fi
    done
  fi
  cd "$SCRIPT_DIR" || exit 1
done
