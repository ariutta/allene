#!/usr/bin/env bash

# see https://stackoverflow.com/a/246128/5354298
get_script_dir() { echo "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"; }
SCRIPT_DIR=$(get_script_dir)
START_DIR=$(pwd)
on_error() {
  true
}
cleanup_complete=0
cleanup() {
  cd "$START_DIR" || return
  cleanup_complete=1
}
# Based on http://linuxcommand.org/lc3_wss0140.php
# and https://codeinthehole.com/tips/bash-error-reporting/
error_exit() {
  #	----------------------------------------------------------------
  #	Function for exit due to fatal program error
  #		Accepts 1 argument:
  #			string containing descriptive error message
  #	----------------------------------------------------------------

  on_error

  read -r line file <<<"$(caller)"
  if [ ! -e "$file" ]; then
    file="$SCRIPT_DIR/$file"
  fi
  echo "" 1>&2
  echo "ERROR: file $file, line $line" 1>&2
  if [ ! "$1" ] && [ -e "$file" ]; then
    sed "${line}q;d" "$file" 1>&2
  else
    echo "${1:-"Unknown Error"}" 1>&2
  fi
  echo "" 1>&2

  # TODO: should error_exit call cleanup?
  #       The EXIT trap already calls cleanup, so
  #       calling it here means calling it twice.
  if [ ! $cleanup_complete ]; then
    cleanup
  fi
  exit 1
}
trap error_exit ERR
trap cleanup EXIT INT QUIT TERM
shopt -s globstar
shopt -s extglob

if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
  echo "allene link-bins"
  echo "Creates directories and symlinks needed for executable files to be accessible to npm/yarn."
  exit 0
fi

ALLE_PKG_JSON_PATH="./package.json"
BIN_DIR="$START_DIR/packages/node_modules/.bin"

# shellcheck source=utils.sh
. "$SCRIPT_DIR"/utils.sh || error_exit "Failed to source utils.sh"
[ -z "$ALLENE_PACMAN_CLI" ] && error_exit "ALLENE_PACMAN_CLI not set"
[ ! -e "$ALLE_PKG_JSON_PATH" ] && error_exit "Missing alle top-level package.json"

mkdir -p "$BIN_DIR"

# TODO: be consistent with how to handle symlinks.
# I'm removing them all here, bc some of the 'ln -s ...' commands below
# don't check whether the symlink exists, but some do check.
rm -rf "$BIN_DIR"
mkdir -p "$BIN_DIR"
#for f in "$BIN_DIR"/*; do
#  echo "$f"
#  if [ -d "$f" ]; then
#    rm -r "$f"
#  elif [ -e "$f" ]; then
#    rm "$f"
#  else
#    echo "deleting $f"
#  fi
#done

# NOTE: .bin can be an object or a string
QUERY=$(
  (sed 's/^\s*//g' | tr -d '\012') <<END
((.bin|objects) // {(.name): (.bin)}) | to_entries | .[] |
"if [ ! -e \"\(\$BIN_DIR)/\(.key)\" ]; then ln -s ../../../node_modules/\(\$name)/\"\(.value)\" \"\(\$BIN_DIR)/\(.key)\"; fi"
END
)

# create symlinks for third-party command line tools
for name in $(jq -r '.dependencies | keys | @sh' "$ALLE_PKG_JSON_PATH"); do
  eval "cd \"$START_DIR\"/node_modules/$name || exit 1"
  if [ "$(jq 'has("bin")' package.json)" == 'true' ]; then
    jq -r --arg name "$name" --arg BIN_DIR "$BIN_DIR" "$QUERY" package.json |
      while read -r cmd; do
        eval "$cmd"
      done
  elif [ -d bin ]; then
    cd bin || exit 1
    source_dir="$(pwd)"
    cd "$BIN_DIR" || exit 1
    for source_path in "$source_dir"/*; do
      executable_name=$(basename "$source_path")
      executable_path="$executable_name"
      if [ -d "$source_path" ] && [ -x "$source_path/index.js" ]; then
        executable_path="$executable_name/index.js"
      elif [ -x "$source_path" ]; then
        executable_path="$executable_name"
      else
        echo "No executable found for $executable_name. Skipping."
        continue
      fi
      if [ -L "$executable_name" ] && [ ! -e "$executable_name" ]; then
        echo "Removing dead symlink"
        rm "$executable_name"
      fi
      if [ -x "$source_path" ] && [ ! -e "$executable_name" ]; then
        # the source is executable and the destination doesn't already exist
        #echo "ln -s ../../../node_modules/$name/bin/\"$executable_path\" \"$executable_name\""
        eval "ln -s ../../../node_modules/$name/bin/\"$executable_path\" \"$executable_name\""
      fi
    done
  fi
  cd "$START_DIR" || exit 1
done

if [ -e "$BIN_DIR/npm" ]; then
  rm "$BIN_DIR/npm"
  #rm "$BIN_DIR/npm-cli.js"
fi

# create symlinks for command line tools of my packages
for pkg_f in $(get_pkg_json_paths); do
  pkg_dir=$(dirname "$pkg_f")
  cd "$pkg_dir" || error_exit "Failed to cd into $pkg_dir"
  if [ ! -d node_modules ]; then
    mkdir node_modules
  fi
  if [ ! -d node_modules/.bin ]; then
    ln -s "$BIN_DIR" node_modules/.bin
  fi
  #(cd node_modules || error_exit "Failed to cd into $pkg_dir/node_modules"; ln -s "$BIN_DIR" .bin)
  if [ -d bin ]; then
    cd bin || exit 1
    source_dir="$(pwd)"
    cd "$BIN_DIR" || exit 1
    for source_path in "$source_dir"/*; do
      filename=$(basename "$source_path")
      if [ -L "$filename" ] && [ ! -e "$filename" ]; then
        echo "Removing dead symlink"
        rm "$filename"
      fi
      if [ -x "$source_path" ] && [ ! -e "$filename" ]; then
        # the source is executable and the destination doesn't already exist
        #echo "ln -s ../../../\"$pkg_dir/bin/$filename\" \"$filename\""
        eval "ln -s ../../../\"$pkg_dir/bin/$filename\" \"$filename\""
      fi
    done
  fi
  cd "$START_DIR" || exit 1
done
