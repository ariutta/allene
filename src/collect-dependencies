#!/usr/bin/env bash

ALLE_PKG_JSON_PATH="./package.json"
ALLE_PKG_JSON_LKG_PATH="/tmp/package.lkg.json"
ALLE_PKG_JSON_UPDATED_PATH="/tmp/package.updated.json"

# see https://stackoverflow.com/a/246128/5354298
get_script_dir() { echo "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"; }
SCRIPT_DIR=$(get_script_dir)
START_DIR=$(pwd)
on_error() {
  # Restoring last-know-good package.json
  cp "$ALLE_PKG_JSON_LKG_PATH" "$ALLE_PKG_JSON_PATH"
}
cleanup_complete=0
cleanup() {
  cd "$START_DIR" || return
  cleanup_complete=1
}
# Based on http://linuxcommand.org/lc3_wss0140.php
# and https://codeinthehole.com/tips/bash-error-reporting/
error_exit() {
  #	----------------------------------------------------------------
  #	Function for exit due to fatal program error
  #		Accepts 1 argument:
  #			string containing descriptive error message
  #	----------------------------------------------------------------

  on_error

  read -r line file <<<"$(caller)"
  if [ ! -e "$file" ]; then
    file="$SCRIPT_DIR/$file"
  fi
  echo "" 1>&2
  echo "ERROR: file $file, line $line" 1>&2
  if [ ! "$1" ] && [ -e "$file" ]; then
    sed "${line}q;d" "$file" 1>&2
  else
    echo "${1:-"Unknown Error"}" 1>&2
  fi
  echo "" 1>&2

  # TODO: should error_exit call cleanup?
  #       The EXIT trap already calls cleanup, so
  #       calling it here means calling it twice.
  if [ ! $cleanup_complete ]; then
    cleanup
  fi
  exit 1
}
trap error_exit ERR
trap cleanup EXIT INT QUIT TERM
shopt -s globstar
shopt -s extglob

# shellcheck source=utils.sh
. "$SCRIPT_DIR"/utils.sh || error_exit "Failed to source utils.sh"
[ -z "$ALLENE_PACMAN_CLI" ] && error_exit "ALLENE_PACMAN_CLI not set"
[ ! -e "$ALLE_PKG_JSON_PATH" ] && error_exit "Missing alle top-level package.json"

cp "$ALLE_PKG_JSON_PATH" "$ALLE_PKG_JSON_LKG_PATH"

my_pkgs_and_versions=$(jq -s \
  'reduce .[] as $pkg_json ({}; . * ($pkg_json | {(.name): ("^" + .version)}))' \
  $(get_pkg_json_paths))

echo "My packages found:" 1>&2
echo "$my_pkgs_and_versions" | jq -r 'keys | .[]' 1>&2
#jq -sr 'map(.name) | .[]' $(get_pkg_json_paths) 1>&2

top_level_pkgs_and_versions=$(jq \
  '.dependencies // {}' \
  $ALLE_PKG_JSON_PATH)

# TODO: what is the best way to handle aliases?
# leaving the version number on gives an error when running 'yarn install'
# and then 'npm install --package-lock-only' for this
#   "qunitjs": "npm:qunit@^2.9.3"
# this seems better but doesn't link qunitjs to qunit in node_modules:
#   "qunit": "^2.9.3"
#   "qunitjs": "npm:qunit"
# Or maybe we just should just collect whatever the alias refers to but
# ignore the alias itself. That's the what code below currently does.
QUERY=$(
  (sed 's/^\s*//g' | tr -d '\012') <<END
map(
  (\$top_level_pkgs_and_versions | to_entries) +
  (\$my_pkgs_and_versions | to_entries) +
  (.dependencies // {} | to_entries) + 
  (.dependencies // {} | to_entries) + 
  (.peerDependencies // {} | to_entries) + 
  (.devDependencies // {} | to_entries)
) |
flatten |
map({
  key,
  semver: (.value |
    capture("(
      (npm:(?<alias>(@?[\\\\w][\\\\w\\\\-\\\\/\\\\.]*))@?)?
      (
        ((?<prefix>[~^]?)?(?<major>[0-9]+).(?<minor>[0-9]+).(?<patch>[0-9]+))
        |
        (?<url>((git|http).*))
      )?
    )")
  )
}) |
map({
  key: (.semver.alias // .key),
  semver
}) |
group_by(.key) |
map(reduce .[] as \$item ({key: "", semvers: []}; {
  key: \$item["key"],
  semvers: (.semvers + [\$item["semver"]])
})) |
map({
  key,
  latest_semver: (.semvers | sort_by(.url, .major, .minor, .patch) | last)
}) |
map({
  (.key): (
    [
      .latest_semver.prefix,
      (
        .latest_semver |
        (
          [.url, .major, .minor, .patch] |
          map(select(. != null)) |
          map(tostring) |
          join(".")
        )
      )
    ] |
    map(select(. != null)) |
    join("")
  )
}) |
reduce .[] as \$item ({}; \$item * .) | . as \$merged_deps |
keys |
reduce .[] as \$pkg_name ({}; {(\$pkg_name): \$merged_deps[\$pkg_name]} * .) | . as \$collected_deps
| \$package_json | .dependencies |= \$collected_deps
END
)

# Collect the latest versions of each dependency along with my packages
# and apply the results to update the top-level alle package.json.
# In the capture section, we are extracting urls and semvers,
# but we are not currently handling git references.
jq -s --sort-keys \
  --argjson top_level_pkgs_and_versions "$top_level_pkgs_and_versions" \
  --argjson my_pkgs_and_versions "$my_pkgs_and_versions" \
  --argfile package_json "$ALLE_PKG_JSON_PATH" \
  "$QUERY" \
  $(get_pkg_json_paths) >"$ALLE_PKG_JSON_UPDATED_PATH"

mv "$ALLE_PKG_JSON_UPDATED_PATH" "$ALLE_PKG_JSON_PATH"
